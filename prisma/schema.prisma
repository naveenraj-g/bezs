generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  sessions      Session[]
  accounts      Account[]

  twoFactorEnabled Boolean?
  twofactors       TwoFactor[]

  role       String?
  banned     Boolean?
  banReason  String?
  banExpires DateTime?

  members     Member[]
  invitations Invitation[]

  username        String?
  displayUsername String?

  @@unique([email])
  @@unique([username])
  @@index([id])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  activeOrganizationId String?

  @@unique([token])
  @@index([id])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@index([id])
  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@index([id])
  @@map("verification")
}

model TwoFactor {
  id          String @id
  secret      String
  backupCodes String
  userId      String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([id])
  @@map("twoFactor")
}

model Organization {
  id          String       @id
  name        String
  slug        String?
  logo        String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  metadata    String?
  members     Member[]
  invitations Invitation[]

  @@unique([slug])
  @@index([id])
  @@map("organization")
}

model Member {
  id             String       @id
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  role           String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([id])
  @@map("member")
}

model Invitation {
  id             String       @id
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  email          String
  role           String?
  status         String
  expiresAt      DateTime
  inviterId      String
  user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)

  @@index([id])
  @@map("invitation")
}

model Role {
  id          String @id @default(uuid())
  name        String @unique
  description String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id])
}

model App {
  id          String @id @default(uuid())
  name        String @unique
  slug        String @unique
  type        String
  description String

  appMenuItems   AppMenuItem[]
  appPermissions AppPermission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id])
}

model AppMenuItem {
  id          String @id @default(uuid())
  name        String
  slug        String
  description String
  image       String
  url         String

  appId String
  app   App    @relation(fields: [appId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id])
}

model AppPermission {
  id          String @id @default(uuid())
  action      String
  actionName  String
  actionType  String
  description String

  appId String
  app   App    @relation(fields: [appId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id])
}
